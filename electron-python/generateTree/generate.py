import json
from collections import deque

import matplotlib.pyplot as plt
import numpy as np
from generateTree.interface.BehaviorNode import BehaviorNode
from scipy.signal import butter, filtfilt, medfilt
from visualization import visualize

global_pos = [[110.27857971191406,60.45960235595703],[110.28634643554688,61.59701156616211],[110.29422760009766,62.75425338745117],[110.30226135253906,63.93131637573242],[110.3104248046875,65.12820434570312],[110.31871795654297,66.34490203857422],[110.3272705078125,67.56201934814453],[110.33457946777344,68.79109954833984],[110.34271240234375,70.03816986083984],[110.35138702392578,71.30440521240234],[110.3603515625,72.5897445678711],[110.36946105957031,73.89408874511719],[110.37867736816406,75.21737670898438],[110.3880615234375,76.55956268310547],[110.39753723144531,77.92060852050781],[110.40706634521484,79.30049896240234],[110.41669464111328,80.69921875],[110.4264144897461,82.11673736572266],[110.43624114990234,83.55306243896484],[110.44615173339844,85.00811004638672],[110.4561767578125,86.48194122314453],[110.46622467041016,87.95974731445312],[110.45222473144531,89.43290710449219],[110.39527130126953,90.91120910644531],[110.30023193359375,92.39571380615234],[110.17205047607422,93.88634490966797],[110.01455688476562,95.38275146484375],[109.83250427246094,96.88505554199219],[109.6305923461914,98.39360809326172],[109.41268920898438,99.90880584716797],[109.18181610107422,101.43101501464844],[108.94027709960938,102.96054077148438],[108.69012451171875,104.49767303466797],[108.43302154541016,106.04261779785156],[108.17020416259766,107.59559631347656],[107.90249633789062,109.1567153930664],[107.63048553466797,110.72607421875],[107.37895965576172,112.3055419921875],[107.18196105957031,113.8871841430664],[107.04196166992188,115.46434020996094],[106.95795440673828,117.04288482666016],[106.92178344726562,118.62114715576172],[106.93217468261719,120.1972885131836],[106.96871185302734,121.77117919921875],[107.02437591552734,123.32042694091797],[107.08318328857422,124.82510375976562],[107.14315032958984,126.32384490966797],[107.19733428955078,127.8359603881836],[107.24313354492188,129.3700408935547],[107.27971649169922,130.92294311523438],[107.30518341064453,132.46359252929688],[107.32266235351562,133.99119567871094],[107.33229064941406,135.52618408203125],[107.33811950683594,137.08001708984375],[107.34061431884766,138.65087890625],[107.36298370361328,140.20884704589844],[107.43269348144531,141.73109436035156],[107.54885864257812,143.2067413330078],[107.70330047607422,144.63218688964844],[107.8891372680664,146.00621032714844],[108.09872436523438,147.32969665527344],[108.32430267333984,148.604736328125],[108.55948638916016,149.833740234375],[108.79964447021484,151.0190887451172],[109.04144287109375,152.16293334960938],[109.28240203857422,153.2676544189453],[109.520751953125,154.33616638183594],[109.75531768798828,155.37057495117188],[109.98552703857422,156.37173461914062],[110.2109375,157.34068298339844],[110.43141174316406,158.2785186767578],[110.62833404541016,159.1887969970703],[110.7790298461914,160.07041931152344],[110.894775390625,160.93609619140625],[110.98993682861328,161.80984497070312],[111.06436157226562,162.7072296142578],[111.11705780029297,163.63685607910156],[111.1559066772461,164.6031036376953],[111.17996215820312,165.60752868652344],[111.18545532226562,166.65077209472656],[111.1856689453125,167.73326110839844],[111.178466796875,168.85406494140625],[111.15853881835938,170.0121612548828],[111.14042663574219,171.2067108154297],[111.12281036376953,172.4365997314453],[111.1007308959961,173.70077514648438],[111.08452606201172,174.99827575683594],[111.07429504394531,176.32858276367188],[111.0688247680664,177.6910858154297],[111.06886291503906,179.08523559570312],[111.0731430053711,180.51040649414062],[111.08173370361328,181.9661407470703],[111.09296417236328,183.4520263671875],[111.106689453125,184.9675750732422],[111.12152099609375,186.5123748779297],[111.13717651367188,188.08607482910156],[111.1528091430664,189.68821716308594],[111.1681137084961,191.31842041015625],[111.1827621459961,192.97621154785156],[111.19650268554688,194.6613006591797],[111.20948791503906,196.3732452392578],[111.2215805053711,198.11167907714844],[111.23316192626953,199.87042236328125],[111.24445343017578,201.61764526367188],[111.2553482055664,203.34811401367188],[111.2662582397461,205.08177185058594],[111.2773208618164,206.8304443359375],[111.28866577148438,208.59495544433594],[111.30014038085938,210.34698486328125],[111.31175231933594,212.08143615722656],[111.32352447509766,213.8186492919922],[111.33556365966797,215.57069396972656],[111.34776306152344,217.3365936279297],[111.35991668701172,219.08621215820312],[111.3719711303711,220.8175506591797],[111.38400268554688,222.55136108398438],[111.39604949951172,224.2998809814453],[111.40816497802734,226.06301879882812],[111.42010498046875,227.81201171875],[111.43193054199219,229.5430450439453],[111.4437484741211,231.27667236328125],[111.45561218261719,233.0250701904297],[111.46759796142578,234.78822326660156],[111.4794692993164,236.53732299804688],[111.49121856689453,238.26849365234375],[111.50302124023438,240.0022430419922],[111.51493072509766,241.750732421875],[111.52693939208984,243.51394653320312],[111.53887176513672,245.2631072998047],[111.55068969726562,246.99429321289062],[111.56251525878906,248.7280731201172],[111.574462890625,250.4766387939453],[111.58647155761719,252.23985290527344],[111.59841918945312,253.989013671875],[111.6102294921875,255.72021484375],[111.6220474243164,257.4540100097656],[111.63397979736328,259.2025451660156],[111.64599609375,260.96575927734375],[111.65792846679688,262.71490478515625],[111.66974639892578,264.44610595703125],[111.68155670166016,266.1799011230469],[111.6934814453125,267.9284362792969],[111.70549774169922,269.6916198730469],[111.7174301147461,271.4407958984375],[111.729248046875,273.1719970703125],[111.74105834960938,274.90576171875],[111.75299835205078,276.654296875],[111.76500701904297,278.4175109863281],[111.77693939208984,280.16668701171875],[111.78875732421875,281.8978576660156],[111.80057525634766,283.63165283203125],[111.81250762939453,285.38018798828125],[111.82451629638672,287.1434020996094],[111.83645629882812,288.8925476074219],[111.8482666015625,290.6237487792969],[111.8600845336914,292.3575439453125],[111.87201690673828,294.1060791015625],[111.884033203125,295.8692626953125],[111.89596557617188,297.6184387207031],[111.90778350830078,299.349609375],[111.91959381103516,301.0834045410156],[111.9315185546875,302.8319396972656],[111.94353485107422,304.59515380859375],[111.9554672241211,306.3443298339844],[111.96728515625,308.0755310058594],[111.97909545898438,309.8092956542969],[111.99103546142578,311.5578308105469],[112.00304412841797,313.321044921875],[112.01497650146484,315.0702209472656],[112.02679443359375,316.8013916015625],[112.03861236572266,318.5351867675781],[112.05054473876953,320.2837219238281],[112.06255340576172,322.04693603515625],[112.07449340820312,323.79608154296875],[112.0863037109375,325.52728271484375],[112.0981216430664,327.2610778808594],[112.11005401611328,329.0096435546875],[112.1220703125,330.77288818359375],[112.13400268554688,332.52203369140625],[112.14582061767578,334.25323486328125],[112.15763092041016,335.98699951171875],[112.16957092285156,337.73553466796875],[112.18157958984375,339.498779296875],[112.19351196289062,341.2479248046875],[112.20532989501953,342.9791259765625],[112.21714782714844,344.712890625],[112.22907257080078,346.46142578125],[112.24108123779297,348.22467041015625],[112.25301361083984,349.97381591796875],[112.26483154296875,351.70501708984375],[112.27664947509766,353.43878173828125],[112.28858184814453,355.1873474121094],[112.30059051513672,356.9505920410156],[112.31253051757812,358.69970703125],[112.3243408203125,360.4309387207031],[112.3361587524414,362.1646728515625],[112.34809112548828,363.9132385253906],[112.360107421875,365.6764831542969],[112.37203979492188,367.4256286621094],[112.38385772705078,369.1568298339844],[112.39566802978516,370.89056396484375],[112.40760803222656,372.6391296386719],[112.41961669921875,374.4023742675781],[112.43154907226562,376.1515197753906],[112.44336700439453,377.8827209472656],[112.45518493652344,379.6164855957031],[112.46711730957031,381.3650207519531],[112.4791259765625,383.1282653808594],[112.49105834960938,384.8774108886719],[112.50287628173828,386.6086120605469],[112.51469421386719,388.3423767089844],[112.52662658691406,390.0909423828125],[112.53864288330078,391.8541564941406],[112.55057525634766,393.6033020019531],[112.56239318847656,395.33453369140625],[112.57420349121094,397.0682678222656],[112.58614349365234,398.81683349609375],[112.59815216064453,400.580078125],[112.6100845336914,402.3292236328125],[112.62190246582031,404.0604248046875],[112.63372039794922,405.7941589355469],[112.6456527709961,407.542724609375],[112.65766143798828,409.30596923828125],[112.66958618164062,411.05511474609375],[112.68140411376953,412.78631591796875],[112.69322204589844,414.52008056640625],[112.70515441894531,416.26861572265625],[112.7171630859375,418.0318603515625],[112.72909545898438,419.781005859375],[112.74091339111328,421.51220703125],[112.75273132324219,423.2459716796875],[112.76466369628906,424.9945068359375],[112.77667999267578,426.75775146484375],[112.78861236572266,428.50689697265625],[112.80043029785156,430.2381286621094],[112.81224060058594,431.97186279296875],[112.82418060302734,433.7204284667969],[112.83618927001953,435.4836730957031],[112.8481216430664,437.2327880859375],[112.85993957519531,438.9640197753906],[112.87175750732422,440.69775390625],[112.8836898803711,442.4463195800781],[112.89569854736328,444.2095642089844],[112.90763092041016,445.9587097167969],[112.91944885253906,447.6899108886719],[112.93126678466797,449.4236755371094],[112.94319915771484,451.1722106933594],[112.95521545410156,452.9354553222656],[112.96714782714844,454.6846008300781],[112.97896575927734,456.4158020019531],[112.99077606201172,458.1495666503906],[113.00271606445312,459.8981018066406],[113.01472473144531,461.6613464355469],[113.02665710449219,463.4104919433594],[113.0384750366211,465.1416931152344],[113.05029296875,466.8754577636719],[113.06222534179688,468.6240234375],[113.07423400878906,470.38726806640625],[113.08616638183594,472.1363830566406],[113.09798431396484,473.86761474609375],[113.10980224609375,475.6013488769531],[113.12173461914062,477.34991455078125],[113.13375091552734,479.1131591796875],[113.14568328857422,480.8623046875],[113.15750122070312,482.593505859375],[113.1693115234375,484.3272399902344],[113.18123626708984,486.0758056640625],[113.19325256347656,487.83905029296875],[113.20518493652344,489.58819580078125],[113.21700286865234,491.31939697265625],[113.22881317138672,493.05316162109375],[113.24075317382812,494.80169677734375],[113.25276184082031,496.56494140625],[113.26469421386719,498.3140869140625],[113.2765121459961,500.0452880859375],[113.288330078125,501.779052734375],[113.30026245117188,503.5276184082031],[113.31227111816406,505.2908630371094],[113.32420349121094,507.03997802734375],[113.33602142333984,508.7712097167969],[113.34783935546875,510.50494384765625],[113.35977172851562,512.2534790039062],[113.37178802490234,514.0167236328125],[113.38372039794922,515.765869140625],[113.39553833007812,517.4970703125],[113.4073486328125,519.2308349609375],[113.41928100585938,520.9794311523438],[113.4312973022461,522.7426147460938],[113.44322967529297,524.4917602539062],[113.45504760742188,526.2230224609375],[113.46686553955078,527.9567260742188],[113.47879791259766,529.705322265625],[113.49080657958984,531.4685668945312],[113.50273895263672,533.2177124023438],[113.51455688476562,534.9489135742188],[113.52637481689453,536.6826171875],[113.5383071899414,538.4312133789062],[113.55032348632812,540.1944580078125],[113.562255859375,541.943603515625]]

# frenet_pos = [[51.03189493433387, 0.09470058280577554], [52.032520325203166, 0.23151091787403374], [53.533458411507105, 0.11215851750159253], [54.53408380237639, 0.06430650789238787], [56.03502188868032, 0.2397157803314296], [57.03564727954962, 0.023615231324449194], [58.03627267041891, 0.19290693399835793], [59.53721075672285, -0.07893386499452361], [60.53783614759214, -0.16754553313154663], [62.03877423389608, -0.06714095244886814], [63.03939962476535, -0.21761565078261022], [64.5403377110693, -0.021063608752461833], [66.04127579737326, -0.15656734509626977], [67.04190118824256, -0.18502711698248953], [68.54283927454652, -0.045167715304031256], [70.04377736085048, 0.07584713865171544], [71.54471544715445, 0.17803233301550117], [72.54534083802375, 0.2388943048042017], [74.0462789243277, 0.1743149581000609], [75.54721701063166, 0.1284582500559224], [77.0481550969356, 0.10138542542671113], [78.54909318323956, 0.07828756892123549], [80.05003126954354, -0.055770501885022604], [81.55096935584749, -0.0949703604770162], [83.05190744215145, -0.19638226363352482], [84.55284552845539, -0.3344627545191189], [86.05378361475937, -0.5022003853619078], [87.55472170106331, -0.6944811123869133], [89.05565978736728, -0.9066454211729127], [90.55659787367122, -1.1349442561252592], [92.05753595997518, -1.3764985670719512], [93.55847404627914, -1.6291567495486212], [95.0594121325831, -1.8910275785596873], [96.56035021888705, -2.160613164967657], [98.06128830519101, 
# -2.436850781634771], [99.56222639149496, -2.7190863174987943], [101.56347717323358, -2.996816630701464], [103.06441525953753, -3.255059298377085], [104.5653533458415, -3.4610451059890113], [106.06629143214545, -3.61187523430547], [107.56722951844941, -3.708305085171971], [109.06816760475336, -3.7584387056901947], [111.06941838649198, 
# -3.7606967196524126], [112.57035647279594, -3.7311643030012127], [114.07129455909988, -3.684366299651384], [115.57223264540384, -3.635723745050341], [117.0731707317078, -3.5860526433904543], [118.57410881801177, -3.5418780344400203], [120.07504690431571, -3.5058202812263737], [121.57598499061966, -3.4793192700601785], [123.07692307692363, -3.4644954519048263], [124.57786116322761, -3.457783926882158], [126.07879924953153, -3.4593678989257657], 
# [127.5797373358355, -3.46595080687908], [129.08067542213942, -3.477789540620972], [131.081926203878, -3.4668661956734526], [132.5828642901819, -3.40628496415782], [134.0838023764858, -3.3020093202294265], [135.0844277673551, -3.1552755328202875], [136.585365853659, -2.973581391570161], [138.08630393996293, -2.7742564951769793], [139.0869293308322, -2.560944297816819], [140.5878674171361, -2.3307239101854806], [141.58849280800538, -2.0982071528716184], [142.58911819887464, -1.8766536613445168], [144.09005628517858, -1.6373274422906536], [145.09068167604786, -1.4012151930857664], [146.09130706691712, -1.1720058836735363], [147.09193245778638, -0.9488573328835933], [148.09255784865567, -0.7335690577678676], [149.09318323952496, -0.5353712819357083], [150.09380863039425, -0.40160507907381804], [150.59412132582887, -0.22986468323220466], [151.59474671669815, -0.06976917127925443], [152.5953721075674, 0.11778158713222207], [153.5959974984367, 0.23600906776226568], [154.09631019387132, 0.2502857656004973], [155.09693558474063, 0.2432135408329894], [156.0975609756099, 0.2580831500889002], [157.09818636647915, 0.28850123741338396], [158.5991244527831, 0.2624873703723764], [159.59974984365235, 0.17734261897072806], [160.60037523452164, 0.15623458087858602], [162.10131332082554, 0.24834212074771017], [163.10193871169483, 0.08072364248856607], [164.60287679799873, 0.23743353310615126], [165.603502188868, 0.06920598933486044], [167.10444027517195, 0.10627592300489601], [168.60537836147586, -0.24481068590812113], [169.60600375234512, -0.15002693076835083], [171.10694183864902, -0.07697069317274777], [172.60787992495295, -0.03779157152851804], [174.10881801125686, -0.02758738368293877], [175.60975609756076, -0.03465164068277961], [177.1106941838647, -0.07341642444453624], [178.61163227016863, -0.1448031612000407], [180.11257035647253, -0.2456986632994877], [182.11382113821108, -0.1254175046913892], [183.614759224515, 0.03153341716292858], [185.11569731081892, 0.2157526162585439], [187.11694809255746, 0.07363121360128676], [188.61788617886137, 0.16407106077034453], [190.61913696059995, 0.07854714159357643], [192.12007504690385, 0.16789852041506978], [194.12132582864237, 0.10290600025295411], [195.62226391494633, 0.12988111477511857], [197.62351469668485, 0.1226709969610702], [199.12445278298875, -0.14093959098941208], [201.12570356472733, -0.10824621244202297], [202.62664165103124, -0.1253106048618279], [204.62789243276978, -0.13869314909608743], [206.1288305190737, -0.11246101445429063], [208.13008130081226, -0.12285297635307095], [209.63101938711617, -0.1258723893284432], [211.63227016885472, -0.14399894015463283], [213.13320825515865, -0.08891528827248243], [215.1344590368972, 0.16377414275070568], [216.6353971232011, 0.09846747144165167], [218.63664790493968, 0.1537500100242443], [220.13758599124358, 0.07638615319189242], [222.13883677298213, 0.19119754744719156], [223.63977485928604, 0.05630285395749739], [225.6410256410246, 
# 0.18175443174623224], [227.14196372732852, 0.0664475934347996], [229.14321450906706, 0.2035927111866412], [230.644152595371, -0.029258766538149086], [232.64540337710955, -0.22346207692586423], [234.14634146341345, -0.038854855301132155], [236.147592245152, -0.2131944760213611], [237.64853033145593, -0.01709369931972134], [239.14946841775983, -0.2499758400173576], [241.15071919949835, 0.0026684572516139085], [243.15196998123693, -0.24066422874593552], [244.65290806754084, 0.007599259354639753], [246.15384615384474, 0.23790262580618035], [248.15509693558337, 0.029512714266393417], [249.65603502188725, 0.21812507047739796], [251.65728580362583, 0.019870655622305104], [253.1582238899297, 0.22837746616772017], [255.15947467166828, 0.041631811118413964], [256.6604127579722, 0.19126549693112094], [258.6616635397109, 0.0614094667327974], [260.16260162601486, -0.20087698660820322], [262.16385240775355, -0.051157070690876195], [263.6647904940575, 0.17914635183242741], [265.6660412757962, -0.08829955680921274], [267.16697936210016, 0.15933827966686864], [269.16823014383885, -0.07865749833048181], [270.66916823014293, -0.16962114008264215], [272.6704190118815, 0.10041865041131523], [274.1713570981856, 0.13247870608071635], [276.17260787992427, 0.12019620583082069], [277.67354596622823, -0.1421207127306791], [279.6747967479669, 0.10994380956850441], [281.1757348342709, 0.12035956101837361], [283.1769856160096, 0.1470557786554916], [284.67792370231354, 0.10058200575237843], [286.6791744840522, 0.1374442369464547], [288.1801125703562, 0.11083440133031827], 
# [290.1813633520949, 0.15920538953011937], [291.68230143839895, 0.07369191523125643], [293.6835522201375, 0.17898304827319295], [295.1844903064415, -0.0833339221213404], [297.1857410881803, -0.1687001355297972], [298.68667917448425, 0.06160328712062389], [300.68792995622283, -0.20584262163807604], [302.1888680425269, 0.041795215215134955], [304.1901188242655, -0.19620056312789735], [305.69105691056956, -0.05207807556341166], [307.69230769230825, 0.21796171487584146], [309.1932457786122, -0.01493564126861786], [311.1944965603509, 0.2377392703038443], [312.69543464665486, -0.024577649614259046], [314.69668542839355, 0.22748687427096778], [316.1976235146975, 0.0028165004996509617], [317.6985616010016, -0.23571385199815684], [319.69981238274016, 0.016930543611290372], [321.20075046904424, -0.24541694431882577], [323.2020012507829, 0.006647629797101593], [324.7029393370869, 0.22365579273535266], [326.7041901188256, -0.04379011590511365], [328.20512820512954, 0.20384772055835085], [330.20637898686823, -0.034117540626568695], [331.7073170731722, -0.21413058094252044], [333.7085678549109, 0.05587869325914532], [335.20950594121484, 0.17698814698275253], [337.21075672295353, 0.07568681667762461], [338.7116948092576, -0.186660618717272], [340.7129455909962, -0.06540395642411476], [342.21388367730015, 0.16489946646204404], [344.21513445903895, -0.1025463898841194], [345.7160725453429, 0.1451219110737304], [347.7173233270815, -0.09284335050224671], [349.21826141338556, -0.15537430699532204], [351.21951219512414, 0.11460450138710254], [352.7204502814282, -0.11823182104021762], [354.7217010631669, 0.1344125736776421], [356.22263914947087, -0.12793491341488425], [358.22388993120956, -0.12412966089930265], [359.7248280175135, 0.1061737616734252], [361.7260787992522, -0.16130266386970882], [363.22701688555617, 0.08636568958086628], [365.22826766729486, -0.15159957164577426], [366.7292057535988, -0.09664854997541619], [368.7304565353375, 0.17336072345617484], [370.2313946216416, 0.05950611587511564], 
# [372.23264540338016, 0.1931687957652687], [373.73358348968424, -0.06917863978361881], [375.7348342714229, -0.18288593488745614], [377.2357723577269, 0.04741748781849332], [379.2370231394656, -0.2200283688287032], [380.73796122576954, 0.02763993293425602], [382.73921200750823, -0.21035579339778074], [384.2401500938122, 0.03789232798764947], [386.2414008755509, 0.23208642872822047], [387.74233896185484, -0.0007498425133739405], [389.2432770481588, 0.24841819516880068], [391.2445278298976, -0.010452934547521841], [393.2457786116362, 0.24161163988201942], [394.74671669794014, 0.01130822387730578], [396.2476547842442, 0.22152810474978485], [398.2489055659828, 0.031116292667316678], [399.74984365228687, -0.23123114497401784], [401.75109443402556, -0.02083348264900949], [403.2520325203295, 0.20946994108794903], [405.2532833020682, -0.05797591525883229], [406.7542213883722, 0.18966186883981911], [408.75547217011086, -0.04830339326579301], [410.2564102564148, -0.19994472974726976], [412.2576610381535, 
# 0.0700645436852129], [413.7585991244575, -0.16280229558909087], [415.75984990619617, 0.08987261599343531], [417.26078799250024, -0.17247487106185203], [419.2620387742388, -0.07958970313204566], [420.7629768605429, 0.15074423627207853], [422.7642276422816, -0.11673218924094195], [424.26516572858554, 0.1309361641267601], [426.26641651032423, -0.10702909702903417], [427.7673545966282, -0.14118850765261892], [429.7686053783669, 0.1287902489693201], [431.26954346467085, 0.10404607363804348], [433.27079424640954, 0.14859832128197004], [434.7717323327135, -0.11374911410953306], [436.7729831144522, -0.13831546025695535], [438.27392120075626, 0.09198796233228548], [440.27517198249484, 0.1754578942206468], [441.7761100687988, 0.07217989027212729], [443.7773608505375, -0.16578531878004293], [445.27829893684145, 0.08246280261557024], [447.27954971858014, 0.1875464711747125], [448.7804878048842, 
# 0.0453203165199295], [450.7817385866228, 0.20735454348542257], [452.28267667292687, -0.05499289196775813], [454.28392745466556, 0.19707168214931303], [455.7848655409695, 0.03323174278763515], [457.7861163227082, 0.23421411625766855], [459.28705440901217, 0.0134541923550423], [461.28830519075086, -0.22451107588598204], [462.7892432770548, 0.023706528632910923], [464.7904940587935, 0.2462722280392189], [466.2914321450975, 0.013435906875984343], [467.79237023140155, 0.23423239581662378], [469.79362101314024, 0.0037328159103419698], [471.2945590994442, 0.24451530835897745], [473.2958098811829, 0.02549397211593976], [474.79674796748685, 0.2073423053921641], [476.79799874922554, 0.0453021415833268], [478.2989368355295, -0.21704534563089067], [480.3001876172682, -0.03501922850289895], [481.80112570357215, 0.19528419402815492], [483.80237648531084, -0.07216171461410281], [485.3033145716149, 
# 0.17547612186110978], [487.3045653533535, -0.06248913928388001], [488.80550343965746, -0.18575898224367193], [490.80675422139615, 0.08425029152642835], [492.3076923077001, 0.14861654826772697], [494.3089430894388, 0.10402784692462443], [495.8098811757429, -0.15831958860684756], [497.81113195748145, -0.09377550248956597], [499.3120700437855, 0.13655843692232172], [501.3133208255242, 0.13091793650052713], [502.8142589118282, 0.116719847938616], [504.81550969356675, 0.12124536104200888], [506.3164477798707, 0.12700276038407093], [508.3176985616094, 0.14300651375518833], [509.8186366479135, 0.08986027428081322], 
# [511.81988742965206, 0.1627536037042152], [513.320825515956, 0.09953284969977469], [515.3220762976945, 0.1525317244373898], [516.8230143839983, 0.07783273292006847], [518.8242651657367, 0.18967415860140274], [520.3252032520405, 0.058024661412797114], [522.3264540337789, -0.1799406012653795], [523.8273921200828, 0.06830752011926217], [525.8286429018212, 0.20170175357781356], [527.329580988125, 0.03110405329781662], [529.3308317698635, 0.22150982589016355], [530.8317698561674, 0.04083766192343424], [532.8330206379057, 0.21122691278831246]]


def default_dump(obj):
    """Convert numpy classes to JSON serializable objects."""
    if isinstance(obj, (np.integer, np.floating, np.bool_)):
        return obj.item()
    elif isinstance(obj, np.ndarray):
        return obj.tolist()
    else:
        return obj


def generateTree():
    frenet_pos = visualize.global_to_frenet(["C:\\Users\\Jack\\Desktop\\SML4ADS.js\\sml4ads.js\\.example\\over\\custom.xodr", 0, -2, global_pos])
    continuous_acceleration_regions, average_acceleration_array, target_velocity_array, continuous_offset_regions, average_offset_array = cluster(frenet_pos)
    generate(continuous_acceleration_regions, average_acceleration_array, target_velocity_array, continuous_offset_regions, average_offset_array)


def cluster(frenet_pos):
    def calculate_speed_acceleration(coordinates, dt=1.0):
        coordinates = np.array(coordinates)
        velocity = np.diff(coordinates, axis=0) / dt
        speed_magnitudes = np.linalg.norm(velocity, axis=1)
        return speed_magnitudes

    def diff_based_detection(data, threshold_diff):
        diff = np.abs(np.diff(data))
        anomalies = np.concatenate(([False], diff > threshold_diff))
        return anomalies

    def replace_with_mean(data, anomalies):
        for i in range(len(anomalies)):
            if anomalies[i]:
                left_index = max(0, i - 1)
                right_index = min(len(data) - 1, i + 1)
                replacement_value = (data[left_index] + data[right_index]) / 2
                data[i] = replacement_value
        return data

    dt = 0.1  # 时间步长，假设每个坐标之间的时间间隔是0.1秒

    def calculate_acceleration(v):
        dv = np.diff(v) / dt
        acceleration = np.concatenate(([0], dv))
        return acceleration

    velocity = calculate_speed_acceleration(global_pos, dt)
    anomalies = diff_based_detection(velocity, 10)
    smoothed_speed_array = replace_with_mean(velocity.copy(), anomalies)

    def butter_lowpass_filter(data, cutoff_frequency, sampling_rate, order=4):
        nyquist = 0.5 * sampling_rate
        normal_cutoff = cutoff_frequency / nyquist
        b, a = butter(order, normal_cutoff, btype='low', analog=False)
        y = filtfilt(b, a, data)
        return y
    cutoff_frequency = 10  # 调整截止频率以适应10Hz以上的高频噪声
    smoothed_velocity_butter = butter_lowpass_filter(smoothed_speed_array, cutoff_frequency, sampling_rate=100.0)
    smoothed_acceleration_array = calculate_acceleration(smoothed_velocity_butter)
    acceleration_array = smoothed_acceleration_array
    # 计算加速度的变化率
    acceleration_diff = np.diff(acceleration_array)

    # 定义阈值来筛选变化率大于阈值的点
    threshold_diff = 0.4  # 根据实际情况调整阈值

    # 找到变化率小于阈值的点的索引
    filtered_indices = np.where(np.abs(acceleration_diff) <= threshold_diff)[0] + 1

    continuous_acceleration_regions = []
    start_idx = filtered_indices[0]
    for i in range(1, len(filtered_indices)):
        if filtered_indices[i] - filtered_indices[i - 1] > 1:
            end_idx = filtered_indices[i - 1]
            continuous_acceleration_regions.append((start_idx, end_idx))
            start_idx = filtered_indices[i]

    # 处理最后一个连续区域
    continuous_acceleration_regions.append((start_idx, filtered_indices[-1]))

    # 仅保留符合条件的加速度和变化率
    filtered_acceleration = acceleration_array[filtered_indices]
    filtered_acceleration_diff = acceleration_diff[filtered_indices - 1]

    average_array = [None] * len(acceleration_array)
    average_array = np.array(average_array)

    average_acceleration_array = []
    target_velocity_array = []
    for start, end in continuous_acceleration_regions:
        # 计算每个连续区域内的平均值
        target_velocity_array.append(round(smoothed_velocity_butter[end], 1))
        average = np.mean(acceleration_array[start: end + 1])
        average_acceleration_array.append(round(average, 1))

    def expand_intervals(intervals, array_length):
        result = []

        for i in range(len(intervals)):
            start, end = intervals[i]

            # 向左扩展
            expanded_start = start
            if i > 0:
                prev_end = intervals[i - 1][1]
                expanded_start = (start + prev_end) // 2 + 1  # 加1以保持间隔为1

            # 向右扩展
            expanded_end = end
            if i < len(intervals) - 1:
                next_start = intervals[i + 1][0]
                expanded_end = (end + next_start) // 2  # 保持间隔为1

            expanded_interval = [expanded_start, expanded_end]
            result.append(expanded_interval)

        # 处理第一个区间的向左扩展
        first_start, first_end = intervals[0]
        result[0][0] = 0

        # 处理最后一个区间的向右扩展
        last_start, last_end = intervals[-1]
        result[-1][1] = array_length - 1

        return result

    continuous_acceleration_regions = expand_intervals(continuous_acceleration_regions, len(acceleration_array))
    for index in range(len(continuous_acceleration_regions)):
        average_array[continuous_acceleration_regions[index][0]: continuous_acceleration_regions[index][1] + 1] = average_acceleration_array[index]

    # 绘制加速度和变化率的图像
    plt.subplot(2, 1, 1)
    plt.plot(acceleration_array, label='Acceleration')
    plt.plot(average_array, color='green')
    plt.scatter(filtered_indices, filtered_acceleration, color='red', label='Filtered Acceleration')
    plt.title('Acceleration with Filtered Points')
    plt.xlabel('Time')
    plt.ylabel('Acceleration')
    plt.legend()

    plt.subplot(2, 1, 2)
    plt.plot(acceleration_diff, label='Acceleration Diff')
    plt.scatter(filtered_indices - 1, filtered_acceleration_diff, color='red', label='Filtered Acceleration Diff')
    plt.title('Acceleration Diff with Filtered Points')
    plt.xlabel('Time')
    plt.ylabel('Acceleration Diff')
    plt.legend()

    plt.tight_layout()
    plt.show()

    offset_y = [point[1] for point in frenet_pos]
    smoothed_offset_y_butter = butter_lowpass_filter(offset_y, cutoff_frequency=10, sampling_rate=100.0)
    smoothed_offset_y_butter = medfilt(smoothed_offset_y_butter, kernel_size=37)
    # 计算位置的变化率
    offset_y_diff = np.diff(smoothed_offset_y_butter)

    # 定义阈值来筛选变化率大于阈值的点
    threshold_diff = 0.08  # 根据实际情况调整阈值

    # 找到变化率大于阈值的点的索引
    filtered_indices = np.where(np.abs(offset_y_diff) >= threshold_diff)[0] + 1
    filtered_offset_y = smoothed_offset_y_butter[filtered_indices - 1]
    filtered_offset_y_diff = offset_y_diff[filtered_indices - 1]

    continuous_offset_regions = []
    start_idx = filtered_indices[0]
    for i in range(1, len(filtered_indices)):
        if filtered_indices[i] - filtered_indices[i - 1] > 1:
            end_idx = filtered_indices[i - 1]
            continuous_offset_regions.append([start_idx, end_idx])
            start_idx = filtered_indices[i]

    # 处理最后一个连续区域
    continuous_offset_regions.append([start_idx, filtered_indices[-1]])

    average_offset_array = []
    for start, end in continuous_offset_regions:
        # 计算每个连续区域内的平均值
        average = np.mean(offset_y_diff[start: end + 1])
        average_offset_array.append(round(average, 1))
    # 绘制图形
    plt.subplot(2, 1, 1)
    plt.plot(smoothed_offset_y_butter, label='Offset')
    plt.scatter(filtered_indices - 1, filtered_offset_y, color='red', label='Filtered Offset')
    plt.title('Offset with Filtered Points')
    plt.xlabel('Time')
    plt.ylabel('Offset')
    plt.legend()

    plt.subplot(2, 1, 2)
    plt.plot(offset_y_diff, label='Offset Diff')
    plt.scatter(filtered_indices - 1, filtered_offset_y_diff, color='red', label='Filtered Offset Diff')
    plt.title('Offset Diff with Filtered Points')
    plt.xlabel('Time')
    plt.ylabel('Offset Diff')
    plt.legend()

    plt.tight_layout()
    plt.show()

    # 合并average相近的区间
    def merge_intervals_with_average(intervals, average_acceleration, target_velocity, threshold=0.2):
        average_acceleration.append(float('inf'))  # 防止最后一个丢失
        current_start_interval_index = 0
        current_end_interval_index = 0
        current_b = average_acceleration[0]

        new_interval_array = []
        new_average_array = []
        new_velocity_array = []

        for i in range(1, len(average_acceleration)):
            if abs(average_acceleration[i] - current_b) <= threshold:
                current_end_interval_index = i
            else:
                new_interval_array.append([intervals[current_start_interval_index][0], intervals[current_end_interval_index][1]])
                total_sum = sum(average_acceleration[current_start_interval_index:current_end_interval_index + 1])
                new_average_array.append(round(total_sum / (current_end_interval_index - current_start_interval_index + 1), 2))
                new_velocity_array.append(target_velocity[current_end_interval_index])
                current_start_interval_index = current_end_interval_index = i
                current_b = average_acceleration[i]
        return new_interval_array, new_average_array, new_velocity_array
    continuous_acceleration_regions, average_acceleration_array, target_velocity_array = merge_intervals_with_average(continuous_acceleration_regions, average_acceleration_array, target_velocity_array, 0.2)

    # 对齐
    threshold_diff = 5
    for index in range(len(continuous_offset_regions)):
        for _start, _end in continuous_acceleration_regions:
            if abs(continuous_offset_regions[index][0] - _start) <= threshold_diff:
                continuous_offset_regions[index][0] = _start
            elif abs(continuous_offset_regions[index][1] - _end) <= threshold_diff:
                continuous_offset_regions[index][1] = _end
    return continuous_acceleration_regions, average_acceleration_array, target_velocity_array, continuous_offset_regions, average_offset_array


def generate(continuous_acceleration_regions, average_acceleration_array, target_velocity_array, continuous_offset_regions, average_offset_array):
    print(f'continuous_acceleration_region: {continuous_acceleration_regions}')
    print(f'average_acceleration_array: {average_acceleration_array}')
    print(f'target_velocity_array: {target_velocity_array}')
    print(f'continuous_offset_regions: {continuous_offset_regions}')
    print(f'average_offset_array: {average_offset_array}')
    args1 = continuous_acceleration_regions
    args2 = continuous_offset_regions
    acc_index = 0
    offset_index = 0

    preprocess_array = []
    while acc_index < len(args1) and offset_index < len(args2):
        if args1[acc_index][0] <= args2[offset_index][0] and args1[acc_index][1] >= args2[offset_index][1]:
            if args1[acc_index][0] < args2[offset_index][0] - 1:
                preprocess_array.append({
                    'interval': [args1[acc_index][0], args2[offset_index][0] - 1],
                    'acceleration': [average_acceleration_array[acc_index]],
                    'target_speed': target_velocity_array[acc_index],
                })
            preprocess_array.append({
                'interval': [args2[offset_index][0], args2[offset_index][1]],
                'acceleration': [average_acceleration_array[acc_index]],
                'direction': average_offset_array[offset_index] > 0
            })
            if args2[offset_index][1] + 1 < args1[acc_index][1]:
                preprocess_array.append({
                    'interval': [args2[offset_index][1] + 1, args1[acc_index][1]],
                    'acceleration': [average_acceleration_array[acc_index]],
                    'target_speed': target_velocity_array[acc_index],
                })
            acc_index += 1
            offset_index += 1
        elif args1[acc_index][1] < args2[offset_index][0]:
            preprocess_array.append({
                'interval': list(args1[acc_index]),
                'acceleration': [average_acceleration_array[acc_index]],
                'target_speed': target_velocity_array[acc_index],
            })
            acc_index += 1
        elif args1[acc_index][1] > args2[offset_index][0] and args1[acc_index][1] < args2[offset_index][1]:
            if args1[acc_index][0] < args2[offset_index][0] - 1:
                preprocess_array.append({
                    'interval': [args1[acc_index][0], args2[offset_index][0] - 1],
                    'acceleration': [average_acceleration_array[acc_index]],
                    'target_speed': target_velocity_array[acc_index],
                })
            preprocess_array.append({
                'interval': [args2[offset_index][0], args2[offset_index][1]],
                'acceleration': [average_acceleration_array[acc_index], average_acceleration_array[acc_index + 1]],
                'direction': average_offset_array[offset_index] > 0
            })
            acc_index += 1
            if args2[offset_index][1] + 1 < args1[acc_index][1]:
                preprocess_array.append({
                    'interval': [args2[offset_index][1] + 1, args1[acc_index][1]],
                    'acceleration': [average_acceleration_array[acc_index]],
                    'target_speed': target_velocity_array[acc_index],
                })
            acc_index += 1
            offset_index += 1

    while acc_index < len(args1):
        preprocess_array.append({
            'interval': list(args1[acc_index]),
            'acceleration': [average_acceleration_array[acc_index]],
            'target_speed': target_velocity_array[acc_index],
        })
        acc_index += 1
    root_node = BehaviorNode(0, "Root")
    current_node = root_node
    global_id = 1

    for item in preprocess_array:
        duration = (item['interval'][1] - item['interval'][0]) / 10
        if 'direction' in item.keys():
            if item['direction']:
                node = BehaviorNode(global_id, "ChangeRight")
            else:
                node = BehaviorNode(global_id, "ChangeLeft")
            node.params = {
                'acceleration': [None, None],
                'targetSpeed': [None, None]
            }
        else:
            if item['acceleration'][0] > 0:
                node = BehaviorNode(global_id, "Accelerate")
            elif item['acceleration'][0] < 0:
                node = BehaviorNode(global_id, "Decelerate")
            else:
                if 'target_speed' in item.keys() and item['target_speed'] > 0:
                    node = BehaviorNode(global_id, "Keep")
                else:
                    node = BehaviorNode(global_id, "Idle")
            node.params = {
                'acceleration': [item['acceleration'][0], item['acceleration'][0]],
                'duration': [duration, duration]}
            if 'target_speed' in item.keys():
                node.params['targetSpeed'] = [item['target_speed'], item['target_speed']]
            else:
                node.params['targetSpeed'] = [None, None]
        current_node.appendChild(node)
        current_node = node
        global_id += 1

    if root_node.childCount() == 0:
        raise ValueError("BehaviorTree has no root")
    if root_node.childCount() > 1:
        raise ValueError("BehaviorTree has more than one root")
    return_json = {
        "rootId": 1,
        "behaviors": [],
        "branchPoints": [],
        "commonTransitions": [],
        "probabilityTransitions": [],
    }

    def generate_sequence(n):
        sequence = list(range(-(n - 1), n, 2))
        return sequence

    # bfs
    def bfs(node, global_id):
        queue = deque([[node]])
        layer = 0
        while queue:
            pop_node_list = queue.popleft()
            add_list = []
            pop_node_list_len = len(pop_node_list)
            sequence = generate_sequence(pop_node_list_len)
            for index in range(pop_node_list_len):
                pop_node = pop_node_list[index]
                return_json['behaviors'].append({
                    "id": pop_node.id,
                    "name": pop_node.name,
                    "params": pop_node.params,
                    "position": {
                        "x": 400 + sequence[index],
                        "y": layer * 300,
                    }
                })
                for child in pop_node.children:
                    return_json['commonTransitions'].append({
                        "id": global_id[0],
                        "sourceId": pop_node.id,
                        "targetId": child.id,
                        "guard": ""
                    })
                    global_id[0] += 1
                for child in pop_node.children:
                    add_list.append(child)
            if len(add_list) > 0:
                queue.append(add_list)
            layer += 1
    bfs(root_node.children[0], [global_id])
    tree_json = json.dumps(return_json, ensure_ascii=False, default=default_dump)
    print(tree_json)
    return tree_json
