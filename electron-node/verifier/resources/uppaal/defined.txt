/************************************* 地图类型定义 *************************************/

/**  
    Road的结构体

    elementType = 1        表示Road类型
    roadId                 唯一标识一条Road
    junctionId             junction的id 表示当前Road在哪一个junction中作为连接路   -1表示不是连接路 不属于任何一条junction
    junctionIndex          索引值 用于在junction数组中索引
    length                 路的总长度
    predecessorElementType predecessor的类型 根据这个类型 在不同的数组中进行索引
    predecessorIndex       索引值 表示当前Road的前继 可以是Road 也可以是一个junction  需要配合predecessorElementType在对应的类型数组中索引    用-1表示空
    successorElementType   successor的类型 根据这个类型 在不同的数组中进行索引
    successorIndex         索引值 表示当前Road的后继 可以是Road 也可以是一个junction  需要配合successorElementType在对应的类型数组中索引    用-1表示空
    maxSpeed               路的最大限速
    laneSections[]         表示当前Road中的道路段索引数组  道路段的顺序就是数组的顺序   道路段中又有很多不同的道路Lane
**/
typedef struct {
    int elementType;
    int roadId;
    int junctionIndex;
    int junctionId;
    int length;
    int predecessorElementType;
    int predecessorIndex;
    int successorElementType;
    int successorIndex;
    int maxSpeed;
    int laneSections[10];
}Road;

/**
    LaneSection结构体

    elementType = 2          表示LaneSection类型
    roadIndex                索引值 表示当前LaneSection属于那一条道路 可以在roads数组中查找
    roadId                   唯一标志当前LaneSection所属Road
    LaneSectionId            唯一标志一个LaneSection
    startPosition            起始偏移位置, 当前LaneSection是距离Road起始位置多少m开始
    lanes                    LaneSection的道路Lane的索引值列表
    length                   LaneSection长度
**/
typedef struct {
    int elementType;
    int roadIndex;
    int roadId;
    int laneSectionId;
    int startPosition;
    int lanes[10];
    int length;
}LaneSection;

/**
    Lane结构体

    elementType = 3          表示Lane类型
    roadId                   当前Lane所属Road的id
    roadIndex                当前Lane所属Road的索引值
    laneSectionIndex         当前Lane所属LaneSection的索引值
    laneId                   标志当前Lane在LaneSection中的相对位置 中心线为0 左边的道路id依次递增 右边的道路id依次递减
    type                     表示当前lane是什么类型 1表示driving
    predecessorIndex         前继Lane的索引值
    successorIndex           后继Lane的索引值
    laneChange               int类型 由于车道从右到左id递增 用该变量表示当前lane是否允许变道 -1表示不知道 1表示允许向左变道 2表示允许向右变道 3表示两边都允许 4表示两边都不允许

**/
typedef struct{
    int elementType;
    int roadId;
    int roadIndex;
    int laneSectionIndex;
    int laneId;
    int type;
    int predecessorIndex;
    int successorIndex;
    int laneChange;
}Lane;

/**
    Junction结构体

    elementType = 4          表示Junction类型
    junctionId               唯一标志一个junction
    connections[]            Connection结构体数组 表示当前junction连接的 incomingRoad 和 connectingRoad

**/
typedef struct {
    int elementType;
    int junctionId;
    int connections[10];
}Junction;

/**
    Connection结构体

    direction               1 left, 2 straight, 3 right, 4 none
    incomingRoadId          驶入Road的id
    connectingRoadId        驶出Road的id
    incomingRoadIndex       索引值 表示当前Connection连接的驶入Road
    connectingRoadIndex     索引值 表示当前Connection连接Road
    laneLinks               LaneLink结构体数组 表示当前连接Road的Lane 连接 驶入Road的Lane 的信息
**/
typedef struct {
    int direction;
    int incomingRoadId;
    int connectingRoadId;
    int incomingRoadIndex;
    int connectingRoadIndex;
    int laneLinks[10];
}Connection;

/**
    LaneLink结构体

    from                    表示当前LaneLink连接的 驶入lane的下标索引
    to                      表示当前LaneLink连接的 驶出lane的下标索引
    laneLinks               表示当前连接Road的Lane 连接 驶入Road的Lane的信息
**/
typedef struct {
    int from;
    int to;
} LaneLink;

/************************************* 车辆类型定义 *************************************/

typedef struct {
    //车的静态信息: id编号, 宽度, 长度
    int id;
    int width;
    int length;

    //车的动态信息: 朝向, 速度, 加速度, 最大速度
    bool heading;
    int speed;
    int acceleration;
    int maxSpeed;

    //车的车道信息: 所在road, laneSection, lane及在road上的偏移量
    int roadId;
    int laneSectionId;
    int laneId;
    int roadIndex;
    int laneSectionIndex;
    int laneIndex;
    int offset;

    //为了初始化简便, 可以将carId和后面所有的Index设置为同一个, 按序号来, 找索引时直接使用id
}Car;

/************************************* 变量和数据 *************************************/

clock time; // 时钟
broadcast chan update, end;

const int FACTOR = 10; // 为保留小数而放大的倍数
const int MIN_DISTANCE_TO_OVERTAKE = 30 * FACTOR; // 超车的最小距离
const int MIN_DISTANCE_TO_CLOSE = 20 * FACTOR; // 两车最小的距离
const int INT16_MIN = -32768;
const int INT16_MAX =  32767;

// RSS
const int ret = 1; // 司机反应时间
const int maxAcc = 6; // 最大加速度
const int minBra = 2; // 最小刹车加速度
const int maxBra = 6; // 最大刹车加速度
const int minCor = 5; // 最小刹车加速度？
const int minLatBra = 2; // 横向换道最小刹车加速度
const int minLatAcc = 1;
const int maxLatAcc = 2;

// 用于检测模型是否正常进行; 不正常的行为(如车辆左变道到没有左侧Lane将会使safeChangeLeft变为false)
bool safeTurnLeft = true;
bool safeTurnRight = true;
bool safeChangeLeft= true;
bool safeChangeRight= true;
bool safeAccelerate = true;
bool safeDecelerate = true;
bool safeKeep = true;
bool safeModifyRoadLane = true;
bool safe = true;

// 函数中不能声明结构体，在这里临时声明
Lane tempLane;
Connection tempConnection;

