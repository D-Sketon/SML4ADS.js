<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>
/************************************* 地图类型定义 *************************************/

/**  
    Road的结构体

    elementType = 1        表示Road类型
    roadId                 唯一标识一条Road
    junctionId             junction的id 表示当前Road在哪一个junction中作为连接路   -1表示不是连接路 不属于任何一条junction
    junctionIndex          索引值 用于在junction数组中索引
    length                 路的总长度
    predecessorElementType predecessor的类型 根据这个类型 在不同的数组中进行索引
    predecessorIndex       索引值 表示当前Road的前继 可以是Road 也可以是一个junction  需要配合predecessorElementType在对应的类型数组中索引    用-1表示空
    successorElementType   successor的类型 根据这个类型 在不同的数组中进行索引
    successorIndex         索引值 表示当前Road的后继 可以是Road 也可以是一个junction  需要配合successorElementType在对应的类型数组中索引    用-1表示空
    maxSpeed               路的最大限速
    laneSections[]         表示当前Road中的道路段索引数组  道路段的顺序就是数组的顺序   道路段中又有很多不同的道路Lane
**/
typedef struct {
    int elementType;
    int roadId;
    int junctionIndex;
    int junctionId;
    int length;
    int predecessorElementType;
    int predecessorIndex;
    int successorElementType;
    int successorIndex;
    int maxSpeed;
    int laneSections[10];
}Road;

/**
    LaneSection结构体

    elementType = 2          表示LaneSection类型
    roadIndex                索引值 表示当前LaneSection属于那一条道路 可以在roads数组中查找
    roadId                   唯一标志当前LaneSection所属Road
    LaneSectionId            唯一标志一个LaneSection
    startPosition            起始偏移位置, 当前LaneSection是距离Road起始位置多少m开始
    lanes                    LaneSection的道路Lane的索引值列表
    length                   LaneSection长度
**/
typedef struct {
    int elementType;
    int roadIndex;
    int roadId;
    int laneSectionId;
    int startPosition;
    int lanes[10];
    int length;
}LaneSection;

/**
    Lane结构体

    elementType = 3          表示Lane类型
    roadId                   当前Lane所属Road的id
    roadIndex                当前Lane所属Road的索引值
    laneSectionIndex         当前Lane所属LaneSection的索引值
    laneId                   标志当前Lane在LaneSection中的相对位置 中心线为0 左边的道路id依次递增 右边的道路id依次递减
    type                     表示当前lane是什么类型 1表示driving
    predecessorIndex         前继Lane的索引值
    successorIndex           后继Lane的索引值
    laneChange               int类型 由于车道从右到左id递增 用该变量表示当前lane是否允许变道 -1表示不知道 1表示允许向左变道 2表示允许向右变道 3表示两边都允许 4表示两边都不允许

**/
typedef struct{
    int elementType;
    int roadId;
    int roadIndex;
    int laneSectionIndex;
    int laneId;
    int type;
    int predecessorIndex;
    int successorIndex;
    int laneChange;
}Lane;

/**
    Junction结构体

    elementType = 4          表示Junction类型
    junctionId               唯一标志一个junction
    connections[]            Connection结构体数组 表示当前junction连接的 incomingRoad 和 connectingRoad

**/
typedef struct {
    int elementType;
    int junctionId;
    int connections[10];
}Junction;

/**
    Connection结构体

    direction               1 left, 2 straight, 3 right, 4 none
    incomingRoadId          驶入Road的id
    connectingRoadId        驶出Road的id
    incomingRoadIndex       索引值 表示当前Connection连接的驶入Road
    connectingRoadIndex     索引值 表示当前Connection连接Road
    laneLinks               LaneLink结构体数组 表示当前连接Road的Lane 连接 驶入Road的Lane 的信息
**/
typedef struct {
    int direction;
    int incomingRoadId;
    int connectingRoadId;
    int incomingRoadIndex;
    int connectingRoadIndex;
    int laneLinks[10];
}Connection;

/**
    LaneLink结构体

    from                    表示当前LaneLink连接的 驶入lane的下标索引
    to                      表示当前LaneLink连接的 驶出lane的下标索引
    laneLinks               表示当前连接Road的Lane 连接 驶入Road的Lane的信息
**/
typedef struct {
    int from;
    int to;
} LaneLink;

/************************************* 车辆类型定义 *************************************/

typedef struct {
    //车的静态信息: id编号, 宽度, 长度
    int id;
    int width;
    int length;

    //车的动态信息: 朝向, 速度, 加速度, 最大速度
    bool heading;
    int speed;
    int acceleration;
    int maxSpeed;

    //车的车道信息: 所在road, laneSection, lane及在road上的偏移量
    int roadId;
    int laneSectionId;
    int laneId;
    int roadIndex;
    int laneSectionIndex;
    int laneIndex;
    int offset;

    //为了初始化简便, 可以将carId和后面所有的Index设置为同一个, 按序号来, 找索引时直接使用id
}Car;

/************************************* 变量和数据 *************************************/

clock time; // 时钟
broadcast chan update, end;

const int FACTOR = 10; // 为保留小数而放大的倍数
const int MIN_DISTANCE_TO_OVERTAKE = 30 * FACTOR; // 超车的最小距离
const int MIN_DISTANCE_TO_CLOSE = 20 * FACTOR; // 两车最小的距离
const int INT16_MIN = -32768;
const int INT16_MAX =  32767;

// RSS
const int ret = 1; // 司机反应时间
const int maxAcc = 6; // 最大加速度
const int minBra = 2; // 最小刹车加速度
const int maxBra = 6; // 最大刹车加速度
const int minCor = 5; // 最小刹车加速度？
const int minLatBra = 2; // 横向换道最小刹车加速度
const int minLatAcc = 1;
const int maxLatAcc = 2;

// 用于检测模型是否正常进行; 不正常的行为(如车辆左变道到没有左侧Lane将会使safeChangeLeft变为false)
bool safeTurnLeft = true;
bool safeTurnRight = true;
bool safeChangeLeft= true;
bool safeChangeRight= true;
bool safeAccelerate = true;
bool safeDecelerate = true;
bool safeKeep = true;
bool safeModifyRoadLane = true;
bool safe = true;

// 函数中不能声明结构体，在这里临时声明
Lane tempLane;
Connection tempConnection;

const int TIME_STEP = 1;
Road roads[1] = {
{1,0,-1,-1,8000,-1,-1,-1,-1,400,{0,-1,-1,-1,-1,-1,-1,-1,-1,-1}}
};
LaneSection laneSections[1] = {
{2,0,0,0,0,{0,1,2,-1,-1,-1,-1,-1,-1,-1},0}
};
Lane lanes[3] = {
{3,0,0,0,0,0,-1,-1,0},
{3,0,0,0,-1,1,-1,-1,0},
{3,0,0,0,-2,1,-1,-1,0}
};
Junction junctions[2];
Connection connections[2];
LaneLink laneLinks[2];

//id, width, length, heading, speed, acceleration, maxSpeed, ..., offset
int countOfCars = 4;
Car cars[4] = {
{0, 0, 0, true, 88, 0, 200, 0, 0, -2, 0, 0, 2, 0},
{1, 0, 0, true, 100, 0, 200, 0, 0, -2, 0, 0, 2, 0},
{2, 0, 0, true, 160, 0, 200, 0, 0, -2, 0, 0, 2, 0},
{3, 0, 0, true, 120, 0, 200, 0, 0, -2, 0, 0, 2, 0}
};

/************************************* 常用函数 *************************************/

/**
   	获取两车的距离差:
   	两车在同一road比才有意义, 否则直接距离差视为无穷大
**/
int distance(Car car1, Car car2){
    int distance = car1.offset - car2.offset;
	if(car1.roadIndex == car2.roadIndex) {
        return distance;
    } else {
        return INT16_MAX;
    }
}

int lateralDistance(Car car1, Car car2) {
    return INT16_MAX;
}

int max(int a, int b) {
    return (a &gt; b ? a : b);
}

int safeDistance(Car car1, Car car2){
    int v1 = car1.speed, v2 = car2.speed;
    return v1*ret+maxAcc*ret*ret*1/2 +(v1+ret*maxAcc)*(v1+ret*maxAcc)/(2*minBra) - v2*v2/(2*maxBra);
}

/**
    同向行驶安全距离规约
**/
bool isSafeSameDirection(Car car1, Car car2){
    if(car1.laneIndex == car2.laneIndex &amp;&amp; car1.heading == car2.heading){
        return distance(car1, car2) &gt; safeDistance(car1, car2);
    }
    return true;
}


int oppositeSafeDistance(Car car1, Car car2){
    int v1p = car1.speed+maxAcc*ret, v2p = abs(car2.speed)+maxAcc*ret;
    int v1 = car1.speed, v2 = car2.speed;
    return (v1+v1p)*ret/2 + v1p*v1p/(2*minCor) + (abs(v2)+v2p)*ret/2 + v2p*v2p/(2*minBra);
}

/**
    相对方向行驶安全距离规约
**/
bool isSafeOppositeDirection(Car car1, Car car2){
    if(car1.laneIndex == car2.laneIndex &amp;&amp; car1.heading == car2.heading){
        return max(oppositeSafeDistance(car1,car2),0) &lt; distance(car1, car2);
    }
    return true;
}

int changeLaneSafeDistance(Car car1, Car car2){
    int v1 = car1.speed, v2 = car2.speed;
    int v1p = v1+minLatAcc*ret, v2p = v2+maxLatAcc*ret;
    return (v1+v1p)*ret/2 + v1p*v1p/(2*minLatBra) - ((v2+v2p)*ret/2 - v2p*v2p/(2*minLatBra));
}

/**
    横向换道安全距离规约
**/
bool isSafeChangeLane(Car car1, Car car2){
    if(car1.laneIndex == car2.laneIndex &amp;&amp; car1.heading == car2.heading){
        return max(changeLaneSafeDistance(car1,car2),0) &lt; lateralDistance(car1, car2);
    }
    return true;
}

/**
    道路最大限速规约
**/
bool isLessThanMaxSpeed(Car car){
    return car.speed &lt; roads[car.roadIndex].maxSpeed;
}

/**
   	初始化汽车，加入随机性
**/
void initCar(Car&amp; car, int offset){
    car.offset = offset;
}

/**
    汽车到路尽头的距离
**/
int distanceToEnd(Car car){
    return car.heading? roads[car.roadIndex].length-car.offset : car.offset;
}

/**
    所在road是junction
**/
bool isJunction(Car car) {
    return roads[car.roadIndex].junctionId != -1;
}

/**
    可以左转；可以右转；可以左换道；可以右换道；
**/
bool canTurnLeft(Car car){
    int i;
    if(!isJunction(car)) { // not in a junction
        return false;
    }
    for(i=0; i&lt;10; i++) { // one of the connections'direction is 1(left)
        tempConnection = connections[junctions[roads[car.roadIndex].junctionIndex].connections[i]];
        if(tempConnection.connectingRoadId == car.roadId &amp;&amp; tempConnection.direction == 1){
            return true;
        }
    }
    return false;
}

bool canTurnRight(Car car){
    int i;
    if(!isJunction(car)) { // not in a junction
        return false;
    }
    for(i=0; i&lt;10; i++) { // one of the connections'direction is 3(right)
        tempConnection = connections[junctions[roads[car.roadIndex].junctionIndex].connections[i]];
        if(tempConnection.connectingRoadId == car.roadId &amp;&amp; tempConnection.direction == 3){
            return true;
        }
    }
    return false;
}

bool canChangeLeft(Car car){
    return lanes[car.laneIndex].laneChange == 1 || lanes[car.laneIndex].laneChange == 3;
}

bool canChangeRight(Car car){
    return lanes[car.laneIndex].laneChange == 2 || lanes[car.laneIndex].laneChange == 3;
}


/************************************* 车辆查询方法 *************************************/

/**
	车的前驱lane
**/
int preLaneIndex(Lane lane){
    return lane.predecessorIndex;
}

/**
  	车的后继lane
**/
int sucLaneIndex(Lane lane){
	return lane.successorIndex;
}

/**
   	车的左侧lane:
   	0. 根据laneId的性质来写: 中心线为0 左边的道路id依次递增 右边的道路id依次递减
   	1. 在同一laneSection中, 若某个laneId1与当前laneId2差为1, 或laneId关系为中心线左右两侧(即1, -1), 则该lane为当前左侧lane
**/
int leftLaneIndex(Lane lane){
    int i;
	for(i=0; i&lt;10; i++) {
        int index = laneSections[lane.laneSectionIndex].lanes[i];
        if(index == -1){
            return -1;
        }
        tempLane = lanes[index];
        if((tempLane.laneId != 0 &amp;&amp; tempLane.laneId - lane.laneId == 1) || (tempLane.laneId == 1 &amp;&amp; lane.laneId == -1)) {
            return index;
        }
    }
    return -1;
}

/**
   	车的右侧lane:
   	0. 同上; 若差值为-1, 则该lane为当前右侧lane
**/
int rightLaneIndex(Lane lane){
    int i;
    for(i=0; i&lt;10; i++) {
        int index = laneSections[lane.laneSectionIndex].lanes[i];
        if(index == -1){
            return -1;
        }
        tempLane = lanes[index];
        if((tempLane.laneId != 0 &amp;&amp; tempLane.laneId - lane.laneId == -1) || (tempLane.laneId == -1 &amp;&amp; lane.laneId == 1)) {
            return index;
        }
    }
    return -1;
}

/************************************* 地图查询方法 *************************************/

/**
   road的前驱类型, 返回elementType
**/
int preRoadType(Road road){
	return road.predecessorElementType;
}

/**
   road的后继类型, 返回elementType
**/
int sucRoadType(Road road){
	return road.successorElementType;
}

/**
   road的前驱, 返回road或者junction的索引
**/
int preRoadIndex(Road road){
    return road.predecessorIndex;
}

/**
   road的后继, 返回road或者junction的索引
**/
int sucRoadIndex(Road road){
	return road.successorIndex;
}

/**
   laneSection的前驱: 可根据lane的前驱计算
**/
int preLaneSectionIndex(LaneSection laneSection){
    return lanes[preLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}

/**
   laneSection的后继: 同上
**/
int sucLaneSectionIndex(LaneSection laneSection){
    return lanes[sucLaneIndex(lanes[laneSection.lanes[0]])].laneSectionIndex;
}


/************************************* 行为实现 *************************************/

/**
    车的一些属性:
    - int roadId            	当前所在road的id
    - int laneSectionId			当前所在laneSection的id
    - int laneId            	当前所在lane的id
    - int offset				车辆在当前lane上的位置
    - int speed             	当前速度大小
    - int acceleration        	当前加速度(包含方向)

    全局的属性:
    - double timestep 			设置的时间步长
    - clock time				时钟
**/


/**
	辅助函数:
	accelerate_s	匀加速直线运动位移公式; 加速度a为负代表减速
	accelerate_v 	匀加速直线运动速度公式
	modifyRoadLane 	运动一段时间后可能改变了road和lane信息, 这时根据偏移修改
**/
int accelerate_s(int v, int a, int t) {
    return v*t/FACTOR +   a * t * t/2 / (FACTOR * FACTOR);
}

int accelerate_v(int v, int a, int t) {
    return v + a * t / FACTOR;
}

void modifyRoadLane(Car&amp; car) {
    int length = roads[car.roadIndex].length;
    int offset = car.offset;
    int ls = car.laneSectionIndex;
    int i = 0, index = 0;
    int nextRoadIndex, nextType;
    if(car.roadIndex == -1 || car.laneIndex == -1 || car.laneSectionIndex == -1) {
        safeModifyRoadLane = -1;
        return;
    }
    for(i = 0; i &lt; 10; i++) {
        if(ls == roads[car.roadIndex].laneSections[i]) {
            index = i;
        }
    }
    if(car.heading) { // the same direction as the road
        // lane, laneSection: 若偏移大于next laneSection.startPostion, 即进入了下一lane和laneSection
        if(i &lt; 9 &amp;&amp; roads[car.roadIndex].laneSections[i+1] != -1 &amp;&amp; laneSections[roads[car.roadIndex].laneSections[i+1]].startPosition &gt; offset) { // next lane
            car.offset -= laneSections[roads[car.roadIndex].laneSections[i+1]].startPosition;
            car.laneIndex = sucLaneIndex(lanes[car.laneIndex]);
            car.laneId = lanes[car.laneIndex].laneId;
            car.laneSectionIndex = sucLaneSectionIndex(laneSections[car.laneSectionIndex]);
            car.laneSectionId =laneSections[car.laneSectionIndex].laneSectionId;
        }
        if(car.offset &gt;= length) { // next road
            nextType = sucRoadType(roads[car.roadIndex]);
            nextRoadIndex = sucRoadIndex(roads[car.roadIndex]);
            if(nextType == -1) {
                safeModifyRoadLane = false;
                return;
            } else if(nextType == 1) {
                car.offset -= length;
                car.roadIndex = nextRoadIndex;
                car.roadId = roads[car.roadIndex].roadId;
                car.laneIndex = sucLaneIndex(lanes[car.laneIndex]);
                car.laneId = lanes[car.laneIndex].laneId;
                car.laneSectionIndex = sucLaneSectionIndex(laneSections[car.laneSectionIndex]);
                car.laneSectionId =laneSections[car.laneSectionIndex].laneSectionId;
            } else if(nextType == 4) {
                // TODO
                return;
            }
        }
    } else { // driving as a different direction to the road
        if(i &gt; 0 &amp;&amp; laneSections[roads[car.roadIndex].laneSections[i]].startPosition &lt; offset) { // next lane
            car.offset = laneSections[roads[car.roadIndex].laneSections[i]].startPosition - car.offset;
            car.laneIndex = preLaneIndex(lanes[car.laneIndex]);
            car.laneId = lanes[car.laneIndex].laneId;
            car.laneSectionIndex = preLaneSectionIndex(laneSections[car.laneSectionIndex]);
            car.laneSectionId =laneSections[car.laneSectionIndex].laneSectionId;
        }
        if(car.offset &lt; 0) { // next road
            car.roadIndex = sucRoadIndex(roads[car.roadIndex]);
            car.offset = roads[car.roadIndex].length;
            car.roadId = roads[car.roadIndex].roadId;
            car.laneIndex = sucLaneIndex(lanes[car.laneIndex]);
            car.laneId = lanes[car.laneIndex].laneId;
            car.laneSectionIndex = sucLaneSectionIndex(laneSections[car.laneSectionIndex]);
            car.laneSectionId =laneSections[car.laneSectionIndex].laneSectionId;
        }
    }
}

/**
	加速:
	1. 根据加速度公式v'=v+at计算速度: speed += timestep * acceletion? 同时需要判断是否到达最大车速
	2. 根据位移公式x=vt+0.5at^2计算移动距离(需根据是否到达最大速度计算): movement = speed * timestep + 0.5 * acceletion * timestep * timestep
    3. 判断是否驶出当前车道, 修改road和lane信息并计算偏移: offset += movement?
**/
void speedUp(Car&amp; car, int targetSpeed){
    int roadMaxSpeed = roads[car.roadIndex].maxSpeed;
    int carMaxSpeed = car.maxSpeed;
    int maxSpeed = (roadMaxSpeed &gt; carMaxSpeed? carMaxSpeed : roadMaxSpeed);

    int v1 = car.speed;
    int a = car.acceleration;
    int v2 = accelerate_v(v1, a, TIME_STEP);
    int t = 0;
    int movement = 0;

    maxSpeed = (maxSpeed &gt; targetSpeed? targetSpeed : maxSpeed);
    if(v2 &gt; maxSpeed) { //在时间段之前已经到达最大速度了, 后面保持匀速
		v2 = maxSpeed;
        t = (v2 - v1) / a; //加速时间
        movement = accelerate_s(v1, a, t) + v2 * (TIME_STEP - t) / FACTOR;
    } else {
        movement = accelerate_s(v1, a, TIME_STEP);
    }

    car.speed = v2;
    car.offset += (car.heading? movement : -movement);
    modifyRoadLane(car);
}


/**
	减速:
    0. 与加速逻辑同理, 此时acclation大小为负
    1. 无需考虑是否到达最大速度, 应考虑速度是否变为0
**/
void speedDown(Car&amp; car, int targetSpeed){
    int v1 = car.speed;
    int a = car.acceleration;
    int v2 = accelerate_v(v1, -a, TIME_STEP);
    int t = 0;
    int movement = 0;
    int minSpeed = (targetSpeed &gt; 0? targetSpeed : 0);

    if(v2 &lt; minSpeed) { //在时间段之前已经到达最小速度了, 后面保持匀速
		v2 = minSpeed;
        t = (v1 - v2) / a; //减速时间
        movement = accelerate_s(v1, -a, t) + v2 * (TIME_STEP - t) / FACTOR;
    } else {
        movement = accelerate_s(v1, -a, TIME_STEP);
    }

    car.speed = v2;
    car.offset += (car.heading? movement : -movement);
    modifyRoadLane(car);
}

/**
	匀速:
    0. 可看作加速度为0的加速运动, 逻辑同上
    1. 无需考虑速度是否为0或达到最大, 只需考虑是否驶出当前lane和road
**/
void keep(Car&amp; car){
    int v = car.speed;
    int movement = v * TIME_STEP / FACTOR;
    car.offset += movement;
    modifyRoadLane(car);
}

/**
    转到左车道:
    0. 可视为一个瞬时动作
    1. speed变为targetSpeed, road不变, lane变为其左侧lane
**/
void changeLeft(Car&amp; car, int targetSpeed){
    int movement;
    if(targetSpeed == -1) {
        targetSpeed = car.speed;
    }
    movement = (car.speed + targetSpeed)/2 * TIME_STEP / (FACTOR * FACTOR);
    car.speed = targetSpeed;
    car.offset += (car.heading? movement : -movement);
    if(lanes[car.laneIndex].laneChange == 1 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = leftLaneIndex(lanes[car.laneIndex]);
        car.laneId = lanes[car.laneIndex].laneId;
    }
    modifyRoadLane(car);
}

/**
    转到右车道:
    0. 逻辑同上转到左车道
**/
void changeRight(Car&amp; car, int targetSpeed){
    int movement;
    if(targetSpeed == -1) {
        targetSpeed = car.speed;
    }
    movement = (car.speed + targetSpeed)/2 * TIME_STEP / (FACTOR * FACTOR);
    car.speed = targetSpeed;
    car.offset += (car.heading? movement : -movement);
    if(lanes[car.laneIndex].laneChange == 2 || lanes[car.laneIndex].laneChange == 3) {
     	car.laneIndex = rightLaneIndex(lanes[car.laneIndex]);
        car.laneId = lanes[car.laneIndex].laneId;
    }
    modifyRoadLane(car);
}

/**
    左转:
    0. 视为一个瞬时动作
    1. speed不变, road和lane都变为左转后的; 若无?
**/
void turnLeft(Car&amp; car){
    int i = 0;
    if(!canTurnLeft(car)) {
        return;
    } else {
        for(i=0; i&lt;10; i++) { // one of the connections'direction is 1(left)
            tempConnection = connections[junctions[roads[car.roadIndex].junctionIndex].connections[i]];
            if(tempConnection.connectingRoadId == car.roadId &amp;&amp; tempConnection.direction == 1){ // enter the begin of next road
                car.offset = 0;
                car.roadId = tempConnection.incomingRoadId;
                car.roadIndex = tempConnection.incomingRoadIndex;
                car.laneSectionId = laneSections[roads[car.roadIndex].laneSections[0]].laneSectionId;
                car.laneSectionIndex = roads[car.roadIndex].laneSections[0];
                car.laneId = lanes[laneSections[car.laneSectionIndex].lanes[0]].laneId;
                car.laneIndex = laneSections[car.laneSectionIndex].lanes[0];
            }
        }
    }
}

/**
   右转:
   0. 逻辑同上左转
**/
void turnRight(Car&amp; car){
    int i = 0;
    if(!canTurnRight(car)) {
        return;
    } else {
        for(i=0; i&lt;10; i++) { // one of the connections'direction is 3(right)
            tempConnection = connections[junctions[roads[car.roadIndex].junctionIndex].connections[i]];
            if(tempConnection.connectingRoadId == car.roadId &amp;&amp; tempConnection.direction == 3){ // enter the begin of next road
                car.offset = 0;
                car.roadId = tempConnection.incomingRoadId;
                car.roadIndex = tempConnection.incomingRoadIndex;
                car.laneSectionId = laneSections[roads[car.roadIndex].laneSections[0]].laneSectionId;
                car.laneSectionIndex = roads[car.roadIndex].laneSections[0];
                car.laneId = lanes[laneSections[car.laneSectionIndex].lanes[0]].laneId;
                car.laneIndex = laneSections[car.laneSectionIndex].lanes[0];
            }
        }
    }
}

/************************************* Guard条件规范 *************************************/

/**
    1：是否在同一条车道内
    *2：车道是否是前后继关系(其他车辆在当前车的前方, car1可能会撞上car2)
**/
bool isInSameLane(Car car1, Car car2) {
    return car1.laneIndex == car2.laneIndex
            || (!car1.heading &amp;&amp; lanes[car1.laneIndex].predecessorIndex == car2.laneIndex)
            || (car1.heading &amp;&amp; lanes[car1.laneIndex].successorIndex == car2.laneIndex);
}

/**
    1：在当前车的左边lane或者在其左边前继lane
    *2：其他车辆在当前车的前方, car1可能会撞上car2
**/
bool isInLeftLane(Car car1, Car car2) {
    int left;
    left = leftLaneIndex(lanes[car1.laneIndex]);
    if(left == -1) {
        return false;
    } else if(left == car2.laneIndex) { // in left
        if(car1.heading &amp;&amp; car1.offset &lt;= car2.offset) { // car1与道路同向, car2在car1在前方
            return true;
        } else if(!car1.heading &amp;&amp; car1.offset &gt;= car2.offset) { // car1与道路反向, car2在car1前方
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

/**
    1：在当前车的右边lane或者在其右边前继lane
**/
bool isInRightLane(Car car1, Car car2) {
    int right;
    right = rightLaneIndex(lanes[car1.laneIndex]);
    if(right == -1) {
        return false;
    } else if(right == car2.laneIndex) { // in left
        if(car1.heading &amp;&amp; car1.offset &lt;= car2.offset) { // car1与道路同向, car2在car1在前方
            return true;
        } else if(!car1.heading &amp;&amp; car1.offset &gt;= car2.offset) { // car1与道路反向, car2在car1前方
            return true;
        } else {
            return false;
        }
    } else {
        return false;
    }
}

/**
    检查当前车辆是否在给定车辆的距离范围内
    1：其他车辆在当前车的前方（不用强调是否在一个车道内）
    2：是否在距离范围内
**/
bool withinDisToObjsInRoad(Car car1, Car car2, int distance) {
    if(car1.roadId != car2.roadId) {  // 不在同一Road
        return false;
    } else if(car1.heading &amp;&amp; car2.offset - car1.offset &lt;= distance &amp;&amp; car2.offset &gt; car1.offset) { // car1和road同向, 那car2.offset应该在car1.offset到road.length之间
        return true;
    } else if(!car1.heading &amp;&amp; car1.offset - car2.offset &lt;= distance &amp;&amp; car2.offset &lt; car1.offset) { // car1和road反向, 那car2.offset应该在0到car1.offset之间
        return true;
    }
    return false;
}

/**
    检查当前车辆是否在给定车辆的距离范围内
    1：与当前车在同一个lane或者在其前继lane
    2：其他车辆在当前车的前方
    3：是否在距离范围内
**/
bool withinDisToObjsInLane(Car car1, Car car2, int distance) {
    return withinDisToObjsInRoad(car1, car2, distance) &amp;&amp; isInSameLane(car1, car2);
}

/**
    检查是否在一定距离内存在物体
    1：与当前车在同一个lane或者在其前继lane
    2：在给定的距离范围内
    3：在当前车的前方
**/
bool hasObjWithinDisInLane(Car car, int distance) {
    int i = 0;
    int count = countOfCars;
    for(i = 0; i &lt; count; i++) {
        if(car.id != cars[i].id &amp;&amp; withinDisToObjsInLane(car, cars[i], distance)) {
            return true;
        }
    }
    return false;
}

/**
    检查是否在一定距离内存在物体
    1：在当前车的左边lane或者在其左边前继lane
    2：在给定的距离范围内
    3：在当前车的前方
    4：没有左边lane则返回false
**/
bool hasObjWithinDisInLeftLane(Car car, int distance) {
    int i = 0;
    int count = countOfCars;
    for(i = 0; i &lt; count; i++) {
        if(car.id != cars[i].id &amp;&amp; isInLeftLane(car, cars[i]) &amp;&amp; abs(car.offset-cars[i].offset) &lt;= distance) {
            return true;
        }
    }
    return false;
}

/**
    检查是否在一定距离内存在物体
    1：在当前车的右边lane或者在其右边前继lane
    2：在给定的距离范围内
    3：在当前车的前方
    4：没有右边lane则返回false
**/
bool hasObjWithinDisInRightLane(Car car, int distance) {
    int i = 0;
    int count = countOfCars;
    for(i = 0; i &lt; count; i++) {
        if(car.id != cars[i].id &amp;&amp; isInRightLane(car, cars[i]) &amp;&amp; abs(car.offset-cars[i].offset) &lt;= distance) {
            return true;
        }
    }
    return false;
}


	</declaration>
    <template>
        <name>Timer</name>
        <location id="id3" x="-144" y="-8">
            <name x="-154" y="-42">Start</name>
            <label kind="invariant" x="-154" y="9">time &lt;= TIME_STEP</label>
        </location>
        <location id="id4" x="144" y="-8">
            <name x="127" y="-42">End</name>
        </location>
        <init ref="id3"/>
        <transition>
            <source ref="id3"/>
            <target ref="id4"/>
            <label kind="synchronisation" x="-126" y="-25">end?</label>
        </transition>
        <transition>
            <source ref="id3"/>
            <target ref="id3"/>
            <label kind="guard" x="-245" y="-135">time == TIME_STEP</label>
            <label kind="synchronisation" x="-245" y="-118">update!</label>
            <label kind="assignment" x="-245" y="-101">time = 0</label>
            <nail x="-272" y="-161"/>
            <nail x="-51" y="-161"/>
        </transition>
    </template>
	<template>
		<name>Ego</name>
		<declaration>
/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0, v=0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0, v=0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;
		</declaration>
		<location id="id0">
			<name>Start</name>
			<committed/>
		</location>
		<location id="id10">
			<name>End</name>
		</location>
		<location id="id1">
			<name>Accelerate</name>
		</location>
		<location id="id2">
			<name>ChangeLeft</name>
		</location>
		<location id="id3">
			<name>Keep</name>
		</location>
		<location id="id4">
			<name>Decelerate</name>
		</location>
		<location id="id5">
			<name>ChangeRight</name>
		</location>
		<branchpoint id="id6" x="544.3240016232112" y="421.12195038863615">
		</branchpoint>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select">offset:int[500,700]</label>
			<label kind="assignment">initCar(cars[0], offset), modifyRoadLane(cars[0])</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="select">i: int[3,3], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="select">i: int[3,3], j:int[2,2], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id1"/>
			<label kind="select">i: int[5,5], j:int[10,10], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id6"/>
			<label kind="select">i: int[1,1], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; )</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id5"/>
			<label kind="select">i: int[4,4], j:int[4,4], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; )</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="select">i: int[4,4], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; )</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="select">i: int[2,2], j:int[1,1], k:int[1,1]</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k</label>
			<label kind="probability">[object Object]</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id2"/>
			<label kind="select">i: int[2,2], j:int[1,1], k:int[2,2]</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k</label>
			<label kind="probability">[object Object]</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 20, speedUp(cars[0],150), lock = !(true &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; ))</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select">i: int[3,3], j:int[2,2]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 0, changeLeft(cars[0], -1), lock = false</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select">i: int[3,3], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = -10, changeLeft(cars[0], 150), lock = false</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select">i: int[4,4], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, keep(cars[0]), lock = !(true &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; ))</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id4"/>
			<label kind="select">i: int[5,5], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 20, speedDown(cars[0],130), lock = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[4,4], j:int[4,4]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 10, speedUp(cars[0],160), lock = !(true &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; E &amp;&amp; g &amp;&amp; o &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; ))</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="select">i: int[5,5], j:int[10,10]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 0, changeRight(cars[0], -1), lock = false</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[6,6], j:int[28,28]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[0].acceleration = 20, speedUp(cars[0],200), lock = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id10"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id10"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id10"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id10"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id5"/>
			<target ref="id10"/>
			<label kind="synchronisation">?</label>
		</transition>
	</template>
	<template>
		<name>F1</name>
		<declaration>
/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0, v=0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0, v=0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;
		</declaration>
		<location id="id0">
			<name>Start</name>
			<committed/>
		</location>
		<location id="id2">
			<name>End</name>
		</location>
		<location id="id1">
			<name>Keep</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select">offset:int[650,1050]</label>
			<label kind="assignment">initCar(cars[1], offset), modifyRoadLane(cars[1])</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, keep(cars[1]), lock = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation">?</label>
		</transition>
	</template>
	<template>
		<name>F2</name>
		<declaration>
/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0, v=0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0, v=0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;
		</declaration>
		<location id="id0">
			<name>Start</name>
			<committed/>
		</location>
		<location id="id2">
			<name>End</name>
		</location>
		<location id="id1">
			<name>Keep</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select">offset:int[800,1350]</label>
			<label kind="assignment">initCar(cars[2], offset), modifyRoadLane(cars[2])</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, keep(cars[2]), lock = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="synchronisation">?</label>
		</transition>
	</template>
	<template>
		<name>B1</name>
		<declaration>
/**
    三元组算法: 由树转化为自动机时，状态迁出时应走行为树对应的边，该算法用于判断相应的边
    (level,group,number)三元组用于标识自动机运行到达的边
    level:  表示边所在行为树的第几层
    group:  表示边所在层的第几棵子树
    number: 表示边所在子树的第几条

    Transition(实线)信息如下(虚线不需要Guard):
    Select -&gt; i:int[1,1], j:int[2,2], k:int[3,3]
    Guard  -&gt; level==i &amp;&amp; group==j
    Update -&gt; group=(group-1)*N+k, level=level+1, number=k
    其中，ijk的值在Java中已读取获得
**/
int level = 1;
int group = 1;
int number = 1;
int N = 3;

/**
    自循环加锁算法: 进入一个Location后，应先"完成行为"再迁出，该算法使用了锁，保证了流程的正确性
    (t, v, lock) 用于判断是否可以迁出
    t: 时间，用于计算是否达到一个行为的持续时间
    v: 速度，用于计算是否达到一个行为的目标速度
    lock: 锁，用于标识是否完成一个行为，完成时释放锁，lock=false；未完成则保留锁，lock=true
    1 迁入:
      Update -&gt; t=0, v=0, lock=true
    2 自循环:
      Guard  -&gt; t&lt;duration &amp;&amp; v&lt;target_speed &amp;&amp; lock
      Update -&gt; t=t+TIME_STEP, v据算法而定, lock=(duration&gt;=t||v&gt;=target_speed)
    3 迁出:
      Guard  -&gt; !lock
      Update -&gt; t=0, v=0, lock=true
**/
int v = 0;
int t = 0;
bool lock = true;
		</declaration>
		<location id="id0">
			<name>Start</name>
			<committed/>
		</location>
		<location id="id4">
			<name>End</name>
		</location>
		<location id="id1">
			<name>Keep</name>
		</location>
		<location id="id2">
			<name>Decelerate</name>
		</location>
		<location id="id3">
			<name>Accelerate</name>
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="select">offset:int[100,500]</label>
			<label kind="assignment">initCar(cars[3], offset), modifyRoadLane(cars[3])</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="select">i: int[2,2], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id2"/>
			<label kind="select">i: int[1,1], j:int[1,1], k:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; !lock &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; B &amp;&amp; 1 &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; )</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">level = level+1, group = (group-1)*N+k, number=k, lock=true, t=0</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id1"/>
			<label kind="select">i: int[1,1], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, keep(cars[3]), lock = !(true &amp;&amp; h &amp;&amp; a &amp;&amp; s &amp;&amp; O &amp;&amp; b &amp;&amp; j &amp;&amp; W &amp;&amp; i &amp;&amp; t &amp;&amp; h &amp;&amp; i &amp;&amp; n &amp;&amp; D &amp;&amp; i &amp;&amp; s &amp;&amp; I &amp;&amp; n &amp;&amp; L &amp;&amp; a &amp;&amp; n &amp;&amp; e &amp;&amp; ( &amp;&amp; B &amp;&amp; 1 &amp;&amp; , &amp;&amp;   &amp;&amp; 2 &amp;&amp; 0 &amp;&amp; ))</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id2"/>
			<label kind="select">i: int[2,2], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[3].acceleration = 20, speedDown(cars[3],0), lock = !(true)</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id3"/>
			<label kind="select">i: int[3,3], j:int[1,1]</label>
			<label kind="guard">level == i &amp;&amp; group == j &amp;&amp; lock</label>
			<label kind="synchronisation">update?</label>
			<label kind="assignment">t=t+TIME_STEP, cars[3].acceleration = 20, speedUp(cars[3],100), lock = true</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id4"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id4"/>
			<label kind="synchronisation">?</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="synchronisation">?</label>
		</transition>
	</template>
<template>
		<name>EndTrigger</name>
		<location id="id19" x="-399" y="-144">
			<name x="-409" y="-178">Start</name>
		</location>
		<location id="id20" x="-102" y="-144">
			<name x="-112" y="-178">Temp</name>
			<urgent/>
		</location>
		<location id="id21" x="153" y="-144">
			<name x="143" y="-178">End</name>
		</location>
		<init ref="id19"/>
		<transition>
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="synchronisation" x="8" y="-161">end!</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id20"/>
			<label kind="guard" x="-348" y="-127">!(safeTurnLeft &amp;&amp;
safeTurnRight &amp;&amp;
safeChangeLeft &amp;&amp;
safeChangeRight &amp;&amp;
safeAccelerate &amp;&amp;
safeDecelerate &amp;&amp;
safeKeep &amp;&amp;
safeModifyRoadLane)
|| false</label>
			<label kind="synchronisation" x="-314" y="-170">update?</label>
		</transition>
	</template>
	<system>
system Timer, Ego, F1, F2, B1, EndTrigger;
	</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
